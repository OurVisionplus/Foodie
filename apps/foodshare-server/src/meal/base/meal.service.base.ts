/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Meal as PrismaMeal,
  Comment as PrismaComment,
  Like as PrismaLike,
  Payment as PrismaPayment,
  User as PrismaUser,
} from "@prisma/client";

export class MealServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MealCountArgs, "select">): Promise<number> {
    return this.prisma.meal.count(args);
  }

  async meals(args: Prisma.MealFindManyArgs): Promise<PrismaMeal[]> {
    return this.prisma.meal.findMany(args);
  }
  async meal(args: Prisma.MealFindUniqueArgs): Promise<PrismaMeal | null> {
    return this.prisma.meal.findUnique(args);
  }
  async createMeal(args: Prisma.MealCreateArgs): Promise<PrismaMeal> {
    return this.prisma.meal.create(args);
  }
  async updateMeal(args: Prisma.MealUpdateArgs): Promise<PrismaMeal> {
    return this.prisma.meal.update(args);
  }
  async deleteMeal(args: Prisma.MealDeleteArgs): Promise<PrismaMeal> {
    return this.prisma.meal.delete(args);
  }

  async findComments(
    parentId: string,
    args: Prisma.CommentFindManyArgs
  ): Promise<PrismaComment[]> {
    return this.prisma.meal
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comments(args);
  }

  async findLikes(
    parentId: string,
    args: Prisma.LikeFindManyArgs
  ): Promise<PrismaLike[]> {
    return this.prisma.meal
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likes(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.meal
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.meal
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
